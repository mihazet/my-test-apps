//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: connection.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "connection_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "connection_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *SetupConnection( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Serial Port"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxWindow *item3 = parent->FindWindow( ID_PORT );
    wxASSERT( item3 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Baudrate"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs5[] = 
    {
        _("921600"), 
        _("460800"), 
        _("345600"), 
        _("230400"), 
        _("115200"), 
        _("57600"), 
        _("38400"), 
        _("19200"), 
        _("9600"), 
        _("4800"), 
        _("2400"), 
        _("1200"), 
        _("600"), 
        _("300"), 
        _("150")
    };
    wxChoice *item5 = new wxChoice( parent, ID_BAUDRATE, wxDefaultPosition, wxSize(100,-1), 15, strs5, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Wordlen"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs7[] = 
    {
        _("8"), 
        _("7"), 
        _("6"), 
        _("5")
    };
    wxChoice *item7 = new wxChoice( parent, ID_WORDLEN, wxDefaultPosition, wxSize(100,-1), 4, strs7, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Parity"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs9[] = 
    {
        _("None"), 
        _("Odd"), 
        _("Even"), 
        _("Mark"), 
        _("Space")
    };
    wxChoice *item9 = new wxChoice( parent, ID_PARITY, wxDefaultPosition, wxSize(100,-1), 5, strs9, 0 );
    item1->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Stopbits"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs11[] = 
    {
        _("1"), 
        _("2")
    };
    wxChoice *item11 = new wxChoice( parent, ID_STOPBITS, wxDefaultPosition, wxSize(100,-1), 2, strs11, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("RTS/CTS"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_RTSCTS, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Xon/Xoff"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item15 = new wxCheckBox( parent, ID_XONXOFF, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
